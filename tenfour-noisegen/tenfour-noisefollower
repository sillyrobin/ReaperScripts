desc:tenfour-noisefollower

import cookdsp.jsfx-inc

slider1:10000<0,10000>Input LP
slider2:5000<0,10000>Input HP 
slider3:10<1,100>Attack ms
slider4:80<1,1000>Release ms

slider6:.7<0,1>Wet Width
slider7:1<0,1>Mix
slider9:1<0,3,1{Thru, Noisy (Input + Noise), Siney (Input+Sine) - for testing, Filtered Input}>Output Type

@init
fol.follow(50);// use any value.
inp_lp.lop(50);// interp
inp_hp.hip(50);// interp

@slider
attHz = 1000/slider3;// ms to hz
relHz = 1000/slider4;// ms to hz
mix = slider7;
wetWidth = slider6;

fol.follow_set_freq(attHz);
inp_lp.lop_set_freq(slider1);
inp_hp.hip_set_freq(slider2);

@sample

// filter incoming signal.
inputL = spl0;
inputR = spl1;
inputFiltered = inp_lp.lop_do((inputL + inputR) * .5);
inputFiltered = inp_hp.hip_do(inputFiltered);

// convert sample into an envelope amplitude
envAmp = fol.follow_do(inputFiltered);
envAmp > oldEnvAmp ? // ascending? use attack. otherwise we're releasing.
(
  fol.follow_set_freq(attHz);
):(
  fol.follow_set_freq(relHz);
);

oldEnvAmp = envAmp;

slider9 == 0 ? (// thru
  wetL = inputL;
  wetR = inputR;
);
slider9 == 1 ? (// noise
  wetL = (rand(2)-1)*envAmp;
  wetR = (rand(2)-1)*envAmp;
  // width
  temp = wetL;
  wetL += (wetR * (1-wetWidth));
  wetR += (temp * (1-wetWidth));
);
slider9 == 2 ? (// sine wave
  wetL = (sin(pos/srate*6.28*220))*envAmp;
  wetR = (sin(pos/srate*6.28*240))*envAmp;
  pos += 1;
  // width
  temp = wetL;
  wetL += (wetR * (1-wetWidth));
  wetR += (temp * (1-wetWidth));
);
slider9 == 3 ? (// filtered input
  wetR = wetL = inputFiltered;
);

// mix wet/dry
spl0=(wetL * mix) + (inputL * (1-mix));
spl1=(wetR * mix) + (inputR * (1-mix));

